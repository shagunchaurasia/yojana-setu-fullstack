import React from "react";
import { withRouter } from "react-router-dom";
import { DownloadOutlined } from "@ant-design/icons";
import CustomizedTable from "../../shared/customizedTable/customizedTable.component";
import CustomizedButton from "./../../shared/customizedForm/customizedButton/customizedButton.component";
import { createStructuredSelector } from "reselect";
import {
  selectIsMailTemplateFetching,
  selectMailTemplatesFromDB,
} from "../../../redux/masterMailTemplates/masterMailTemplates.selector";
import { connect } from "react-redux";
import ReactTable from "react-table";
import { fetchMailTemplatesStartAsync } from "./../../../redux/masterMailTemplates/masterMailTemplates.action";

const MasterMailTemplatesComponent = (props) => {
  console.log("inside master mail template");
  console.log(props);
  console.log(props.mailTemplates.data);
  console.log("inside master mail template");

  const data = React.useMemo(() => props.data, []);

  const editMailTemplate = (idSelected) => {
    props.history.push(props.location.pathname + "/" + idSelected);
  };
  const deleteMailTemplate = (idSelected) => {
    console.log(idSelected);
  };
  const columns = React.useMemo(
    () => [
      {
        Header: "Actions",
        accessor: "_id", // accessor is the "key" in the data
        Cell: (props) => (
          <div>
            <CustomizedButton
              onClickHandler={() => editMailTemplate(props.value)}
            >
              Edit
            </CustomizedButton>
            <CustomizedButton
              onClickHandler={() => deleteMailTemplate(props.value)}
            >
              Delete
            </CustomizedButton>
          </div>
        ),
      },
      {
        Header: "Status",
        accessor: "status", // accessor is the "key" in the data
        Cell: (props) => (
          <div> {props.value == "1" ? "Active" : "Inactive"} </div>
        ),
      },
      {
        Header: "Template Name",
        accessor: "templateName",
      },
      {
        Header: "Subject",
        accessor: "subject",
      },
      {
        Header: "Mail To",
        accessor: "mailTo",
      },
      {
        Header: "Mail CC",
        accessor: "mailCC",
      },
      {
        Header: "Mail BCC",
        accessor: "mailBCC",
      },
    ],
    []
  );

  const redirectToAdd = () => {
    props.history.push("/adminPanel/masterMailTemplates/add");
  };

  return (
    <div>
      <CustomizedButton
        type="primary"
        icon={<DownloadOutlined />}
        size="large"
        onClickHandler={redirectToAdd}
        style={{ backgroundColor: "#ff008b" }}
      >
        Add Mail Template
      </CustomizedButton>
      <br></br>
      <br></br>
      {props.mailTemplates.data ? (
        // <CustomizedTable
        //   columns={columns}
        //   data={props.mailTemplates}
        //   hasData={data ? true : false}
        // ></CustomizedTable>
        <ReactTable
          //Our component state holds current table data, as well as pagination info
          data={props.mailTemplates.data}
          // page={props.page}
          // pages={props.pages}
          //Some props for styling the table and enabling pagination controls
          className="-highlight"
          columns={columns}
          minRows={1}
          defaultPageSize={20}
          loading={props.isLoading}
          showPagination={true}
          showPaginationTop={false}
          showPaginationBottom={true}
          pageSizeOptions={[5, 10, 20, 25, 50, 100]}
          //Set the manual prop when enabling server-side data
          manual
          //Keep the component state in sync with the table's controlled props
          // onPageChange={(pageIndex) => {
          //   // this.setState({ page: pageIndex });
          // }}
          // onPageSizeChange={(pageSize, pageIndex) => {
          //   this.setState({ page: pageIndex, pageSize: pageSize });
          // }}
          //Callback to respond to requests for new data, whether on page load or interactions with the table
          onFetchData={(state, instance) => {
            // this.setState({ loading: true });
            props.fetchMailTemplatesStartAsync();
            // fetchRecordData(
            //   "records",
            //   this.props.type,
            //   state.page,
            //   state.pageSize,
            //   state.sorted,
            //   this.props.filter,
            //   (res) => {
            //     this.setState({
            //       data: res.data,
            //       page: state.page,
            //       pages: res.pages,
            //       loading: false,
            //     });
            //   }
            // );
            console.log("Inside fetch data");
          }}
        />
      ) : (
        "Nothing was found"
      )}
    </div>
  );
};

const mapStateToProps = createStructuredSelector({
  mailTemplates: selectMailTemplatesFromDB,
  isLoading: selectIsMailTemplateFetching,
});

const mapDispatchToProps = (dispatch) => ({
  fetchMailTemplatesStartAsync: () =>
    dispatch(fetchMailTemplatesStartAsync({ pageSize: 2, limitSize: 10 })),
});

export default withRouter(
  connect(mapStateToProps, mapDispatchToProps)(MasterMailTemplatesComponent)
);
